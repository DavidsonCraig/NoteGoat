import GrandStaff from "../GrandStaff";
import { render, screen, waitFor } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import * as rr from "react-router"

it("Should render all accidentals", async () => {
    const contextSpy = jest.spyOn(rr, "useOutletContext")
    let mockdata = {keySignature: "CMaj"}
    contextSpy.mockReturnValue(mockdata)
    const {container} = render(
        <GrandStaff></GrandStaff>
    )
    const staffSharp1T = container.querySelector("#staffSharp1T")
    const staffSharp2T = container.querySelector("#staffSharp2T")
    const staffSharp3T = container.querySelector("#staffSharp3T")
    const staffSharp4T = container.querySelector("#staffSharp4T")
    const staffSharp5T = container.querySelector("#staffSharp5T")
    const staffSharp6T = container.querySelector("#staffSharp6T")
    const staffSharp7T = container.querySelector("#staffSharp7T")

    const staffSharp1B = container.querySelector("#staffSharp1B")
    const staffSharp2B = container.querySelector("#staffSharp2B")
    const staffSharp3B = container.querySelector("#staffSharp3B")
    const staffSharp4B = container.querySelector("#staffSharp4B")
    const staffSharp5B = container.querySelector("#staffSharp5B")
    const staffSharp6B = container.querySelector("#staffSharp6B")
    const staffSharp7B  = container.querySelector("#staffSharp7B")

    const staffFlat1T = container.querySelector("#staffFlat1T")
    const staffFlat2T = container.querySelector("#staffFlat2T")
    const staffFlat3T = container.querySelector("#staffFlat3T")
    const staffFlat4T = container.querySelector("#staffFlat4T")
    const staffFlat5T = container.querySelector("#staffFlat5T")
    const staffFlat6T = container.querySelector("#staffFlat6T")
    const staffFlat7T = container.querySelector("#staffFlat7T")

    const staffFlat1B = container.querySelector("#staffFlat1B")
    const staffFlat2B = container.querySelector("#staffFlat2B")
    const staffFlat3B = container.querySelector("#staffFlat3B")
    const staffFlat4B = container.querySelector("#staffFlat4B")
    const staffFlat5B = container.querySelector("#staffFlat5B")
    const staffFlat6B = container.querySelector("#staffFlat6B")
    const staffFlat7B = container.querySelector("#staffFlat7B")

    expect(staffSharp1T).toBeInTheDocument()
    expect(staffSharp2T).toBeInTheDocument()
    expect(staffSharp3T).toBeInTheDocument()
    expect(staffSharp4T).toBeInTheDocument()
    expect(staffSharp5T).toBeInTheDocument()
    expect(staffSharp6T).toBeInTheDocument()
    expect(staffSharp7T).toBeInTheDocument()

    expect(staffSharp1B).toBeInTheDocument()
    expect(staffSharp2B).toBeInTheDocument()
    expect(staffSharp3B).toBeInTheDocument()
    expect(staffSharp4B).toBeInTheDocument()
    expect(staffSharp5B).toBeInTheDocument()
    expect(staffSharp6B).toBeInTheDocument()
    expect(staffSharp7B).toBeInTheDocument()

    expect(staffFlat1T).toBeInTheDocument()
    expect(staffFlat2T).toBeInTheDocument()
    expect(staffFlat3T).toBeInTheDocument()
    expect(staffFlat4T).toBeInTheDocument()
    expect(staffFlat5T).toBeInTheDocument()
    expect(staffFlat6T).toBeInTheDocument()
    expect(staffFlat7T).toBeInTheDocument()

    expect(staffFlat1B).toBeInTheDocument()
    expect(staffFlat2B).toBeInTheDocument()
    expect(staffFlat3B).toBeInTheDocument()
    expect(staffFlat4B).toBeInTheDocument()
    expect(staffFlat5B).toBeInTheDocument()
    expect(staffFlat6B).toBeInTheDocument()
    expect(staffFlat7B).toBeInTheDocument()

    contextSpy.mockRestore()
})

describe("Accidentals should correct render given the keySignature prop", () => {
    it("Should have no accidentals in CMaj", async () => {
        const contextSpy = jest.spyOn(rr, "useOutletContext")
        let mockdata = {keySignature: "CMaj"}
        contextSpy.mockReturnValue(mockdata)
        const {container} = render(
            <GrandStaff></GrandStaff>
        )
        const staffSharp1T = container.querySelector("#staffSharp1T")
        const staffSharp2T = container.querySelector("#staffSharp2T")
        const staffSharp3T = container.querySelector("#staffSharp3T")
        const staffSharp4T = container.querySelector("#staffSharp4T")
        const staffSharp5T = container.querySelector("#staffSharp5T")
        const staffSharp6T = container.querySelector("#staffSharp6T")
        const staffSharp7T = container.querySelector("#staffSharp7T")
    
        const staffSharp1B = container.querySelector("#staffSharp1B")
        const staffSharp2B = container.querySelector("#staffSharp2B")
        const staffSharp3B = container.querySelector("#staffSharp3B")
        const staffSharp4B = container.querySelector("#staffSharp4B")
        const staffSharp5B = container.querySelector("#staffSharp5B")
        const staffSharp6B = container.querySelector("#staffSharp6B")
        const staffSharp7B  = container.querySelector("#staffSharp7B")
    
        const staffFlat1T = container.querySelector("#staffFlat1T")
        const staffFlat2T = container.querySelector("#staffFlat2T")
        const staffFlat3T = container.querySelector("#staffFlat3T")
        const staffFlat4T = container.querySelector("#staffFlat4T")
        const staffFlat5T = container.querySelector("#staffFlat5T")
        const staffFlat6T = container.querySelector("#staffFlat6T")
        const staffFlat7T = container.querySelector("#staffFlat7T")
    
        const staffFlat1B = container.querySelector("#staffFlat1B")
        const staffFlat2B = container.querySelector("#staffFlat2B")
        const staffFlat3B = container.querySelector("#staffFlat3B")
        const staffFlat4B = container.querySelector("#staffFlat4B")
        const staffFlat5B = container.querySelector("#staffFlat5B")
        const staffFlat6B = container.querySelector("#staffFlat6B")
        const staffFlat7B = container.querySelector("#staffFlat7B")
    
        expect(staffSharp1T.getAttribute("opacity")).toBe("0")
        expect(staffSharp2T.getAttribute("opacity")).toBe("0")
        expect(staffSharp3T.getAttribute("opacity")).toBe("0")
        expect(staffSharp4T.getAttribute("opacity")).toBe("0")
        expect(staffSharp5T.getAttribute("opacity")).toBe("0")
        expect(staffSharp6T.getAttribute("opacity")).toBe("0")
        expect(staffSharp7T.getAttribute("opacity")).toBe("0")
    
        expect(staffSharp1B.getAttribute("opacity")).toBe("0")
        expect(staffSharp2B.getAttribute("opacity")).toBe("0")
        expect(staffSharp3B.getAttribute("opacity")).toBe("0")
        expect(staffSharp4B.getAttribute("opacity")).toBe("0")
        expect(staffSharp5B.getAttribute("opacity")).toBe("0")
        expect(staffSharp6B.getAttribute("opacity")).toBe("0")
        expect(staffSharp7B.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1T.getAttribute("opacity")).toBe("0")
        expect(staffFlat2T.getAttribute("opacity")).toBe("0")
        expect(staffFlat3T.getAttribute("opacity")).toBe("0")
        expect(staffFlat4T.getAttribute("opacity")).toBe("0")
        expect(staffFlat5T.getAttribute("opacity")).toBe("0")
        expect(staffFlat6T.getAttribute("opacity")).toBe("0")
        expect(staffFlat7T.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1B.getAttribute("opacity")).toBe("0")
        expect(staffFlat2B.getAttribute("opacity")).toBe("0")
        expect(staffFlat3B.getAttribute("opacity")).toBe("0")
        expect(staffFlat4B.getAttribute("opacity")).toBe("0")
        expect(staffFlat5B.getAttribute("opacity")).toBe("0")
        expect(staffFlat6B.getAttribute("opacity")).toBe("0")
        expect(staffFlat7B.getAttribute("opacity")).toBe("0")
    
        contextSpy.mockRestore()
    })

    it("Should render correct accidentals for GMaj", async () => {
        const contextSpy = jest.spyOn(rr, "useOutletContext")
        let mockdata = {keySignature: "GMaj"}
        contextSpy.mockReturnValue(mockdata)
        const {container} = render(
            <GrandStaff></GrandStaff>
        )
        const staffSharp1T = container.querySelector("#staffSharp1T")
        const staffSharp2T = container.querySelector("#staffSharp2T")
        const staffSharp3T = container.querySelector("#staffSharp3T")
        const staffSharp4T = container.querySelector("#staffSharp4T")
        const staffSharp5T = container.querySelector("#staffSharp5T")
        const staffSharp6T = container.querySelector("#staffSharp6T")
        const staffSharp7T = container.querySelector("#staffSharp7T")
    
        const staffSharp1B = container.querySelector("#staffSharp1B")
        const staffSharp2B = container.querySelector("#staffSharp2B")
        const staffSharp3B = container.querySelector("#staffSharp3B")
        const staffSharp4B = container.querySelector("#staffSharp4B")
        const staffSharp5B = container.querySelector("#staffSharp5B")
        const staffSharp6B = container.querySelector("#staffSharp6B")
        const staffSharp7B  = container.querySelector("#staffSharp7B")
    
        const staffFlat1T = container.querySelector("#staffFlat1T")
        const staffFlat2T = container.querySelector("#staffFlat2T")
        const staffFlat3T = container.querySelector("#staffFlat3T")
        const staffFlat4T = container.querySelector("#staffFlat4T")
        const staffFlat5T = container.querySelector("#staffFlat5T")
        const staffFlat6T = container.querySelector("#staffFlat6T")
        const staffFlat7T = container.querySelector("#staffFlat7T")
    
        const staffFlat1B = container.querySelector("#staffFlat1B")
        const staffFlat2B = container.querySelector("#staffFlat2B")
        const staffFlat3B = container.querySelector("#staffFlat3B")
        const staffFlat4B = container.querySelector("#staffFlat4B")
        const staffFlat5B = container.querySelector("#staffFlat5B")
        const staffFlat6B = container.querySelector("#staffFlat6B")
        const staffFlat7B = container.querySelector("#staffFlat7B")
    
        expect(staffSharp1T.getAttribute("opacity")).toBe("1")
        expect(staffSharp2T.getAttribute("opacity")).toBe("0")
        expect(staffSharp3T.getAttribute("opacity")).toBe("0")
        expect(staffSharp4T.getAttribute("opacity")).toBe("0")
        expect(staffSharp5T.getAttribute("opacity")).toBe("0")
        expect(staffSharp6T.getAttribute("opacity")).toBe("0")
        expect(staffSharp7T.getAttribute("opacity")).toBe("0")
    
        expect(staffSharp1B.getAttribute("opacity")).toBe("1")
        expect(staffSharp2B.getAttribute("opacity")).toBe("0")
        expect(staffSharp3B.getAttribute("opacity")).toBe("0")
        expect(staffSharp4B.getAttribute("opacity")).toBe("0")
        expect(staffSharp5B.getAttribute("opacity")).toBe("0")
        expect(staffSharp6B.getAttribute("opacity")).toBe("0")
        expect(staffSharp7B.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1T.getAttribute("opacity")).toBe("0")
        expect(staffFlat2T.getAttribute("opacity")).toBe("0")
        expect(staffFlat3T.getAttribute("opacity")).toBe("0")
        expect(staffFlat4T.getAttribute("opacity")).toBe("0")
        expect(staffFlat5T.getAttribute("opacity")).toBe("0")
        expect(staffFlat6T.getAttribute("opacity")).toBe("0")
        expect(staffFlat7T.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1B.getAttribute("opacity")).toBe("0")
        expect(staffFlat2B.getAttribute("opacity")).toBe("0")
        expect(staffFlat3B.getAttribute("opacity")).toBe("0")
        expect(staffFlat4B.getAttribute("opacity")).toBe("0")
        expect(staffFlat5B.getAttribute("opacity")).toBe("0")
        expect(staffFlat6B.getAttribute("opacity")).toBe("0")
        expect(staffFlat7B.getAttribute("opacity")).toBe("0")
    
        contextSpy.mockRestore()
    })

    it("Should render correct accidentals for DMaj", async () => {
        const contextSpy = jest.spyOn(rr, "useOutletContext")
        let mockdata = {keySignature: "DMaj"}
        contextSpy.mockReturnValue(mockdata)
        const {container} = render(
            <GrandStaff></GrandStaff>
        )
        const staffSharp1T = container.querySelector("#staffSharp1T")
        const staffSharp2T = container.querySelector("#staffSharp2T")
        const staffSharp3T = container.querySelector("#staffSharp3T")
        const staffSharp4T = container.querySelector("#staffSharp4T")
        const staffSharp5T = container.querySelector("#staffSharp5T")
        const staffSharp6T = container.querySelector("#staffSharp6T")
        const staffSharp7T = container.querySelector("#staffSharp7T")
    
        const staffSharp1B = container.querySelector("#staffSharp1B")
        const staffSharp2B = container.querySelector("#staffSharp2B")
        const staffSharp3B = container.querySelector("#staffSharp3B")
        const staffSharp4B = container.querySelector("#staffSharp4B")
        const staffSharp5B = container.querySelector("#staffSharp5B")
        const staffSharp6B = container.querySelector("#staffSharp6B")
        const staffSharp7B  = container.querySelector("#staffSharp7B")
    
        const staffFlat1T = container.querySelector("#staffFlat1T")
        const staffFlat2T = container.querySelector("#staffFlat2T")
        const staffFlat3T = container.querySelector("#staffFlat3T")
        const staffFlat4T = container.querySelector("#staffFlat4T")
        const staffFlat5T = container.querySelector("#staffFlat5T")
        const staffFlat6T = container.querySelector("#staffFlat6T")
        const staffFlat7T = container.querySelector("#staffFlat7T")
    
        const staffFlat1B = container.querySelector("#staffFlat1B")
        const staffFlat2B = container.querySelector("#staffFlat2B")
        const staffFlat3B = container.querySelector("#staffFlat3B")
        const staffFlat4B = container.querySelector("#staffFlat4B")
        const staffFlat5B = container.querySelector("#staffFlat5B")
        const staffFlat6B = container.querySelector("#staffFlat6B")
        const staffFlat7B = container.querySelector("#staffFlat7B")
    
        expect(staffSharp1T.getAttribute("opacity")).toBe("1")
        expect(staffSharp2T.getAttribute("opacity")).toBe("1")
        expect(staffSharp3T.getAttribute("opacity")).toBe("0")
        expect(staffSharp4T.getAttribute("opacity")).toBe("0")
        expect(staffSharp5T.getAttribute("opacity")).toBe("0")
        expect(staffSharp6T.getAttribute("opacity")).toBe("0")
        expect(staffSharp7T.getAttribute("opacity")).toBe("0")
    
        expect(staffSharp1B.getAttribute("opacity")).toBe("1")
        expect(staffSharp2B.getAttribute("opacity")).toBe("1")
        expect(staffSharp3B.getAttribute("opacity")).toBe("0")
        expect(staffSharp4B.getAttribute("opacity")).toBe("0")
        expect(staffSharp5B.getAttribute("opacity")).toBe("0")
        expect(staffSharp6B.getAttribute("opacity")).toBe("0")
        expect(staffSharp7B.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1T.getAttribute("opacity")).toBe("0")
        expect(staffFlat2T.getAttribute("opacity")).toBe("0")
        expect(staffFlat3T.getAttribute("opacity")).toBe("0")
        expect(staffFlat4T.getAttribute("opacity")).toBe("0")
        expect(staffFlat5T.getAttribute("opacity")).toBe("0")
        expect(staffFlat6T.getAttribute("opacity")).toBe("0")
        expect(staffFlat7T.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1B.getAttribute("opacity")).toBe("0")
        expect(staffFlat2B.getAttribute("opacity")).toBe("0")
        expect(staffFlat3B.getAttribute("opacity")).toBe("0")
        expect(staffFlat4B.getAttribute("opacity")).toBe("0")
        expect(staffFlat5B.getAttribute("opacity")).toBe("0")
        expect(staffFlat6B.getAttribute("opacity")).toBe("0")
        expect(staffFlat7B.getAttribute("opacity")).toBe("0")
    
        contextSpy.mockRestore()
    })

    it("Should render correct accidentals for AMaj", async () => {
        const contextSpy = jest.spyOn(rr, "useOutletContext")
        let mockdata = {keySignature: "AMaj"}
        contextSpy.mockReturnValue(mockdata)
        const {container} = render(
            <GrandStaff></GrandStaff>
        )
        const staffSharp1T = container.querySelector("#staffSharp1T")
        const staffSharp2T = container.querySelector("#staffSharp2T")
        const staffSharp3T = container.querySelector("#staffSharp3T")
        const staffSharp4T = container.querySelector("#staffSharp4T")
        const staffSharp5T = container.querySelector("#staffSharp5T")
        const staffSharp6T = container.querySelector("#staffSharp6T")
        const staffSharp7T = container.querySelector("#staffSharp7T")
    
        const staffSharp1B = container.querySelector("#staffSharp1B")
        const staffSharp2B = container.querySelector("#staffSharp2B")
        const staffSharp3B = container.querySelector("#staffSharp3B")
        const staffSharp4B = container.querySelector("#staffSharp4B")
        const staffSharp5B = container.querySelector("#staffSharp5B")
        const staffSharp6B = container.querySelector("#staffSharp6B")
        const staffSharp7B  = container.querySelector("#staffSharp7B")
    
        const staffFlat1T = container.querySelector("#staffFlat1T")
        const staffFlat2T = container.querySelector("#staffFlat2T")
        const staffFlat3T = container.querySelector("#staffFlat3T")
        const staffFlat4T = container.querySelector("#staffFlat4T")
        const staffFlat5T = container.querySelector("#staffFlat5T")
        const staffFlat6T = container.querySelector("#staffFlat6T")
        const staffFlat7T = container.querySelector("#staffFlat7T")
    
        const staffFlat1B = container.querySelector("#staffFlat1B")
        const staffFlat2B = container.querySelector("#staffFlat2B")
        const staffFlat3B = container.querySelector("#staffFlat3B")
        const staffFlat4B = container.querySelector("#staffFlat4B")
        const staffFlat5B = container.querySelector("#staffFlat5B")
        const staffFlat6B = container.querySelector("#staffFlat6B")
        const staffFlat7B = container.querySelector("#staffFlat7B")
    
        expect(staffSharp1T.getAttribute("opacity")).toBe("1")
        expect(staffSharp2T.getAttribute("opacity")).toBe("1")
        expect(staffSharp3T.getAttribute("opacity")).toBe("1")
        expect(staffSharp4T.getAttribute("opacity")).toBe("0")
        expect(staffSharp5T.getAttribute("opacity")).toBe("0")
        expect(staffSharp6T.getAttribute("opacity")).toBe("0")
        expect(staffSharp7T.getAttribute("opacity")).toBe("0")
    
        expect(staffSharp1B.getAttribute("opacity")).toBe("1")
        expect(staffSharp2B.getAttribute("opacity")).toBe("1")
        expect(staffSharp3B.getAttribute("opacity")).toBe("1")
        expect(staffSharp4B.getAttribute("opacity")).toBe("0")
        expect(staffSharp5B.getAttribute("opacity")).toBe("0")
        expect(staffSharp6B.getAttribute("opacity")).toBe("0")
        expect(staffSharp7B.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1T.getAttribute("opacity")).toBe("0")
        expect(staffFlat2T.getAttribute("opacity")).toBe("0")
        expect(staffFlat3T.getAttribute("opacity")).toBe("0")
        expect(staffFlat4T.getAttribute("opacity")).toBe("0")
        expect(staffFlat5T.getAttribute("opacity")).toBe("0")
        expect(staffFlat6T.getAttribute("opacity")).toBe("0")
        expect(staffFlat7T.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1B.getAttribute("opacity")).toBe("0")
        expect(staffFlat2B.getAttribute("opacity")).toBe("0")
        expect(staffFlat3B.getAttribute("opacity")).toBe("0")
        expect(staffFlat4B.getAttribute("opacity")).toBe("0")
        expect(staffFlat5B.getAttribute("opacity")).toBe("0")
        expect(staffFlat6B.getAttribute("opacity")).toBe("0")
        expect(staffFlat7B.getAttribute("opacity")).toBe("0")
    
        contextSpy.mockRestore()
    })

    it("Should render correct accidentals for EMaj", async () => {
        const contextSpy = jest.spyOn(rr, "useOutletContext")
        let mockdata = {keySignature: "EMaj"}
        contextSpy.mockReturnValue(mockdata)
        const {container} = render(
            <GrandStaff></GrandStaff>
        )
        const staffSharp1T = container.querySelector("#staffSharp1T")
        const staffSharp2T = container.querySelector("#staffSharp2T")
        const staffSharp3T = container.querySelector("#staffSharp3T")
        const staffSharp4T = container.querySelector("#staffSharp4T")
        const staffSharp5T = container.querySelector("#staffSharp5T")
        const staffSharp6T = container.querySelector("#staffSharp6T")
        const staffSharp7T = container.querySelector("#staffSharp7T")
    
        const staffSharp1B = container.querySelector("#staffSharp1B")
        const staffSharp2B = container.querySelector("#staffSharp2B")
        const staffSharp3B = container.querySelector("#staffSharp3B")
        const staffSharp4B = container.querySelector("#staffSharp4B")
        const staffSharp5B = container.querySelector("#staffSharp5B")
        const staffSharp6B = container.querySelector("#staffSharp6B")
        const staffSharp7B  = container.querySelector("#staffSharp7B")
    
        const staffFlat1T = container.querySelector("#staffFlat1T")
        const staffFlat2T = container.querySelector("#staffFlat2T")
        const staffFlat3T = container.querySelector("#staffFlat3T")
        const staffFlat4T = container.querySelector("#staffFlat4T")
        const staffFlat5T = container.querySelector("#staffFlat5T")
        const staffFlat6T = container.querySelector("#staffFlat6T")
        const staffFlat7T = container.querySelector("#staffFlat7T")
    
        const staffFlat1B = container.querySelector("#staffFlat1B")
        const staffFlat2B = container.querySelector("#staffFlat2B")
        const staffFlat3B = container.querySelector("#staffFlat3B")
        const staffFlat4B = container.querySelector("#staffFlat4B")
        const staffFlat5B = container.querySelector("#staffFlat5B")
        const staffFlat6B = container.querySelector("#staffFlat6B")
        const staffFlat7B = container.querySelector("#staffFlat7B")
    
        expect(staffSharp1T.getAttribute("opacity")).toBe("1")
        expect(staffSharp2T.getAttribute("opacity")).toBe("1")
        expect(staffSharp3T.getAttribute("opacity")).toBe("1")
        expect(staffSharp4T.getAttribute("opacity")).toBe("1")
        expect(staffSharp5T.getAttribute("opacity")).toBe("0")
        expect(staffSharp6T.getAttribute("opacity")).toBe("0")
        expect(staffSharp7T.getAttribute("opacity")).toBe("0")
    
        expect(staffSharp1B.getAttribute("opacity")).toBe("1")
        expect(staffSharp2B.getAttribute("opacity")).toBe("1")
        expect(staffSharp3B.getAttribute("opacity")).toBe("1")
        expect(staffSharp4B.getAttribute("opacity")).toBe("1")
        expect(staffSharp5B.getAttribute("opacity")).toBe("0")
        expect(staffSharp6B.getAttribute("opacity")).toBe("0")
        expect(staffSharp7B.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1T.getAttribute("opacity")).toBe("0")
        expect(staffFlat2T.getAttribute("opacity")).toBe("0")
        expect(staffFlat3T.getAttribute("opacity")).toBe("0")
        expect(staffFlat4T.getAttribute("opacity")).toBe("0")
        expect(staffFlat5T.getAttribute("opacity")).toBe("0")
        expect(staffFlat6T.getAttribute("opacity")).toBe("0")
        expect(staffFlat7T.getAttribute("opacity")).toBe("0")
    
        expect(staffFlat1B.getAttribute("opacity")).toBe("0")
        expect(staffFlat2B.getAttribute("opacity")).toBe("0")
        expect(staffFlat3B.getAttribute("opacity")).toBe("0")
        expect(staffFlat4B.getAttribute("opacity")).toBe("0")
        expect(staffFlat5B.getAttribute("opacity")).toBe("0")
        expect(staffFlat6B.getAttribute("opacity")).toBe("0")
        expect(staffFlat7B.getAttribute("opacity")).toBe("0")
    
        contextSpy.mockRestore()
    })
})